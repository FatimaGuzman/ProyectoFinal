//Proyecto Final 
//Ing. sistemas computacionales B

/*Integrantes
Karen Lizbeth Castillo
Fatima Guzman Rubio
Karen Rocio Navarrete Lopez
Yessica Perez Castro
Maura Graciela Sanchez Fajardo
*/
#include<iostream>
#include<GL/glut.h>
#include<cmath>
#include<Windows.h>

using namespace std;

//Instancias
void heart();
void display();
void init();
void addQuad();
void drawQuads();
void drawGrid();
void keyboard(unsigned char key,int x, int y);

//Variables
int cx=0,cy=0,cz=0;
int cn;
int radius =4;
int c=20,mxmn=1;


//METODOS
struct Quads{
	
  int x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4;
  float r,g,b;
  int state;
  int total;	
}; Quads Q[100];




void addQuad(){
	
	Q[0].state++; if(Q[0].state>4){ Q[0].state=1;}
	int st=Q[0].state;
	
	if(st==1){ Q[0].total++; cn =Q[0].total;}
	if(st==1                     ){Q[cn].x1=cx; Q[cn].y1=cy; Q[cn].z1=cz;}
	if(st==1||st==2              ){Q[cn].x2=cx; Q[cn].y2=cy; Q[cn].z2=cz;}
	if(st==1||st==2||st==3       ){Q[cn].x3=cx; Q[cn].y3=cy; Q[cn].z3=cz;}
	if(st==1||st==2||st==3||st==4){Q[cn].x4=cx; Q[cn].y4=cy; Q[cn].z4=cz;}	
};


void drawQuads(){
int i;
	for(i=1;i<Q[0].total+1;i++)
	{
	glBegin(GL_QUADS);
	glColor3f(Q[i].r,Q[i].g,Q[i].b);
	glVertex3f(Q[i].x1,Q[i].y1,Q[i].z1);
	glVertex3f(Q[i].x2,Q[i].y2,Q[i].z2);
	glVertex3f(Q[i].x3,Q[i].y3,Q[i].z3);
	glVertex3f(Q[i].x4,Q[i].y4,Q[i].z4);	
	glEnd();
	}
};


//Metodo que llamara los demas metodos 
void display(){

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(-13,0,-45);
	glRotatef(40,1,1,0);
	
	drawGrid();
	drawQuads();
	heart();
	glutSwapBuffers();
}

//se indican las condiciones iniciales del programa
void init(){
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(35,1.0f,0.1f,1000);
	glMatrixMode(GL_MODELVIEW);
	glEnable(GL_DEPTH_TEST);
	glClearColor(0.2,0.2,0.2,1);
}



 //metodo para poder movernos dentro del programa 
 //solo con las teclas w,a,s,d,q,z y la barra espaciadora
void keyboard(unsigned char key,int x, int y){
	
	if(key=='w'){
		cz-=1; //adelante
	}
	if(key=='s'){
		cz+=1; //atras
	}    
	if(key=='a'){
		cx-=1; //izquierda
	}
	if(key=='d'){
		cx+=1; //derecha
	}    	
	if(key=='q'){
		cy+=1; //arriba
	}
	if(key=='z'){
		cy-=1; //abajo
	}    
	if(key==32){
	addQuad(); //barra espaciadora
	}					

	//asignacion de colores 
	if(key=='r'){ Q[cn].r=0.9; Q[cn].g=0.36; Q[cn].b=0.52; }
	if(key=='g'){ Q[cn].r=0.326; Q[cn].g=0.95; Q[cn].b=0.82; }
	if(key=='b'){ Q[cn].r=0.74; Q[cn].g=0.97; Q[cn].b=0.10; }
	if(key=='y'){ Q[cn].r=0.60; Q[cn].g=0.15; Q[cn].b=0.78; }
		
	glutPostRedisplay();
}	



//metodo que dibujara la figura que nos servira para definir las figuras dentro del plano
void heart(){
		glTranslatef(cx,cy,cz);
		glBegin(GL_POLYGON);
		 for (float x = -1.139; x <= 1.139; x += 0.001) 
        {
            float delta = pow((x*x),1.0/3) *pow((x*x),1.0/3) - 4*x*x + 4;
            float y1 = (pow((x*x),1.0/3) + sqrt(delta)) / 2;
            float y2 = (pow((x*x),1.0/3) - sqrt(delta)) / 2;
            glVertex2f(x, y1);
            glVertex2f(x, y2);
           
        }
		glEnd();
}


void drawGrid(){
int i;
	for(i=0;i<40;i++){
		
		glPushMatrix();
		if(i< 20){ glTranslatef(0,0,i);}
		if(i>=20){ glTranslatef(i-20,0,0); glRotatef(-90,0,1,0);}
	
		glBegin(GL_LINES);
		glColor3f(1,1,1); glLineWidth(1);
		glVertex3f(0,-0.1,0); glVertex3f(19,-0.1,0);
		glEnd();
		glPopMatrix();
	}
}

//metodo principal que define el tama√±o, posicion y titulo de la ventana de ejecucion 
//de igual forma mandara a llamar el metodo que contiene los demas metodos a ejecutarse
int main(int argc, char **argv){
	
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE);
	glutInitWindowSize(800,600);
	glutCreateWindow("Corazon");
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	init();
	glutMainLoop();
	return 0;
}
